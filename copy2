<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: white;
            overflow: hidden;
        }
        
        .header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }
        
        #snake_img {
            width: 60px;
            height: 60px;
            margin-right: 15px;
            filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.7));
            animation: sway 2s infinite alternate ease-in-out;
        }
        
        @keyframes sway {
            from { transform: rotate(-10deg); }
            to { transform: rotate(10deg); }
        }
        
        #snakegame {
            font-size: 2.5rem;
            font-weight: bold;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }
        
        .container {
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            text-align: center;
            width: 90%;
            max-width: 500px;
        }
        
        #game-board {
            width: 400px;
            height: 400px;
            border: 2px solid #fdbb2d;
            position: relative;
            overflow: hidden;
            background-color: #111;
            margin: 0 auto;
        }
        
        #score-display {
            margin: 20px 0;
            font-size: 1.5rem;
        }
        
        button {
            background: linear-gradient(to right, #fdbb2d, #b21f1f);
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }
        
        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.9);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            display: none;
            z-index: 10;
            border: 2px solid #fdbb2d;
        }
        
        .snake-segment {
            position: absolute;
            width: 20px;
            height: 20px;
            background-size: contain;
            background-repeat: no-repeat;
            z-index: 2;
        }
        
        .snake-head {
            position: absolute;
            width: 20px;
            height: 20px;
            background-size: contain;
            background-repeat: no-repeat;
            z-index: 3;
        }
        
        .food {
            position: absolute;
            width: 20px;
            height: 20px;
            background-size: contain;
            background-repeat: no-repeat;
            z-index: 1;
            animation: pulse 0.5s infinite alternate;
        }
        
        @keyframes pulse {
            from { transform: scale(1); }
            to { transform: scale(1.2); }
        }
        
        @media (max-width: 600px) {
            #game-board {
                width: 300px;
                height: 300px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <img src="https://cdn.pixabay.com/photo/2013/07/13/10/07/rattlesnake-156773_640.png" id="snake_img">
        <h1 id="snakegame">Snake Game</h1>
    </div>
    
    <div class="container">
        <div id="game-board"></div>
        <div id="score-display">Score: <span id="score">0</span></div>
        <button id="restart-btn">Restart Game</button>
        <div class="game-over" id="game-over">
            <h2>Game Over!</h2>
            <p>Your score: <span id="final-score">0</span></p>
            <button id="play-again-btn">Play Again</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Game elements
            const gameBoard = document.getElementById('game-board');
            const scoreDisplay = document.getElementById('score');
            const finalScoreDisplay = document.getElementById('final-score');
            const restartBtn = document.getElementById('restart-btn');
            const playAgainBtn = document.getElementById('play-again-btn');
            const gameOverScreen = document.getElementById('game-over');
            
            // Game settings
            const gridSize = 20;
            const cellSize = gameBoard.offsetWidth / gridSize;
            let snake = [];
            let food = {};
            let direction = 'right';
            let nextDirection = 'right';
            let gameInterval;
            let score = 0;
            
            // Image URLs
            const snakeHeadImg = 'https://cdn.pixabay.com/photo/2013/07/13/10/07/rattlesnake-156773_640.png';
            const snakeBodyImg = 'https://cdn.pixabay.com/photo/2013/07/13/10/07/decorative-156772_640.png';
            const foodImg = 'https://cdn.pixabay.com/photo/2013/07/13/10/07/frog-156774_640.png';
            
            // Initialize game
            function initGame() {
                // Clear any existing game
                clearInterval(gameInterval);
                gameBoard.innerHTML = '';
                
                // Reset game state
                snake = [];
                direction = 'right';
                nextDirection = 'right';
                score = 0;
                scoreDisplay.textContent = '0';
                gameOverScreen.style.display = 'none';
                
                // Create initial snake
                for (let i = 2; i >= 0; i--) {
                    snake.push({
                        x: i,
                        y: 0,
                        type: i === 0 ? 'head' : 'body'
                    });
                }
                
                // Create first food
                createFood();
                
                // Draw initial state
                draw();
                
                // Start game loop
                gameInterval = setInterval(gameLoop, 150);
            }
            
            // Game loop
            function gameLoop() {
                moveSnake();
                checkCollision();
                draw();
            }
            
            // Move snake
            function moveSnake() {
                direction = nextDirection;
                
                // Calculate new head position
                const head = { ...snake[0], type: 'body' };
                const newHead = { ...head, type: 'head' };
                
                switch (direction) {
                    case 'up':
                        newHead.y--;
                        break;
                    case 'down':
                        newHead.y++;
                        break;
                    case 'left':
                        newHead.x--;
                        break;
                    case 'right':
                        newHead.x++;
                        break;
                }
                
                // Add new head
                snake.unshift(newHead);
                
                // Check if snake ate food
                if (newHead.x === food.x && newHead.y === food.y) {
                    // Increase score
                    score++;
                    scoreDisplay.textContent = score;
                    
                    // Create new food
                    createFood();
                } else {
                    // Remove tail if no food was eaten
                    snake.pop();
                }
            }
            
            // Create food at random position
            function createFood() {
                let validPosition = false;
                let newFood;
                
                while (!validPosition) {
                    newFood = {
                        x: Math.floor(Math.random() * gridSize),
                        y: Math.floor(Math.random() * gridSize)
                    };
                    
                    // Check if food position is not on snake
                    validPosition = true;
                    for (const segment of snake) {
                        if (segment.x === newFood.x && segment.y === newFood.y) {
                            validPosition = false;
                            break;
                        }
                    }
                }
                
                food = newFood;
            }
            
            // Check for collisions
            function checkCollision() {
                const head = snake[0];
                
                // Check wall collision
                if (head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize) {
                    gameOver();
                    return;
                }
                
                // Check self collision (skip the head)
                for (let i = 1; i < snake.length; i++) {
                    if (head.x === snake[i].x && head.y === snake[i].y) {
                        gameOver();
                        return;
                    }
                }
            }
            
            // Draw game state
            function draw() {
                // Clear game board
                gameBoard.innerHTML = '';
                
                // Draw snake
                snake.forEach((segment, index) => {
                    const segmentElement = document.createElement('div');
                    segmentElement.className = segment.type === 'head' ? 'snake-head' : 'snake-segment';
                    segmentElement.style.backgroundImage = `url('${segment.type === 'head' ? snakeHeadImg : snakeBodyImg}')`;
                    segmentElement.style.left = `${segment.x * cellSize}px`;
                    segmentElement.style.top = `${segment.y * cellSize}px`;
                    
                    // Rotate head based on direction
                    if (segment.type === 'head') {
                        switch (direction) {
                            case 'up':
                                segmentElement.style.transform = 'rotate(-90deg)';
                                break;
                            case 'down':
                                segmentElement.style.transform = 'rotate(90deg)';
                                break;
                            case 'left':
                                segmentElement.style.transform = 'rotate(180deg)';
                                break;
                            case 'right':
                                segmentElement.style.transform = 'rotate(0deg)';
                                break;
                        }
                    }
                    
                    gameBoard.appendChild(segmentElement);
                });
                
                // Draw food
                const foodElement = document.createElement('div');
                foodElement.className = 'food';
                foodElement.style.backgroundImage = `url('${foodImg}')`;
                foodElement.style.left = `${food.x * cellSize}px`;
                foodElement.style.top = `${food.y * cellSize}px`;
                gameBoard.appendChild(foodElement);
            }
            
            // Game over
            function gameOver() {
                clearInterval(gameInterval);
                finalScoreDisplay.textContent = score;
                gameOverScreen.style.display = 'block';
            }
            
            // Event listeners
            document.addEventListener('keydown', (e) => {
                switch (e.key) {
                    case 'ArrowUp':
                        if (direction !== 'down') nextDirection = 'up';
                        break;
                    case 'ArrowDown':
                        if (direction !== 'up') nextDirection = 'down';
                        break;
                    case 'ArrowLeft':
                        if (direction !== 'right') nextDirection = 'left';
                        break;
                    case 'ArrowRight':
                        if (direction !== 'left') nextDirection = 'right';
                        break;
                }
            });
            
            restartBtn.addEventListener('click', initGame);
            playAgainBtn.addEventListener('click', initGame);
            
            // Start game
            initGame();
        });
    </script>
</body>
</html>